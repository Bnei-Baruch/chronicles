name: CI/CD Pipeline

on:
  workflow_dispatch:
    
jobs:
  test:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:12
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: chronicles
        options: >-
          --health-cmd="pg_isready" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.17'

      - name: Run unit tests
        env:
          GOOS: linux
          CGO_ENABLED: 0
        run: |
          set -o pipefail
          go test -v $(go list ./... | grep -v /models) | tee test.log
        continue-on-error: false

      - name: Upload test log if tests fail
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: test.log

  build:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ success() || needs.test.result == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.BBDEPLOYMENT_DOCKERHUB_USERNAME }}
          password: ${{ secrets.BBDEPLOYMENT_DOCKERHUB_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            bneibaruch/chronicles:latest
            bneibaruch/chronicles:gh_${{github.run_number}}
          build-args: |
            build_number=gh_${{github.run_number}}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ success() || needs.build.result == 'success' }}
    
    steps:      
      - name: Deploy to production via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.CHRONICLES_HOST_PRODUCTION }}
          username: root
          key: ${{ secrets.BBDEPLOYMENT_SSH_PRIVATE_KEY }}
          proxy_host: ${{ secrets.SSH_PROXY_HOST }}
          proxy_username: ${{ secrets.SSH_PROXY_USERNAME }}
          proxy_key: ${{ secrets.BBDEPLOYMENT_SSH_PRIVATE_KEY }}
          script: |
            cd /opt/chronicles
            docker compose pull app

            mkdir -p ./migrations
            docker create --name temp-container bneibaruch/chronicles:latest
            docker cp temp-container:/app/migrations ./migrations
            docker rm temp-container
            export $(cat .env | xargs) && docker run -v $(pwd)/migrations:/migrations --network host migrate/migrate -path=/migrations/ -database postgres://$DB_USER:$DB_PASSWORD@localhost:5432/chronicles?sslmode=disable up
            
            docker compose up -d --no-deps app
        